rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin'
      );
    }

    function isRestaurantOwner(restaurantId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/restaurants/$(restaurantId)).data.ownerId == request.auth.uid ||
        (
          request.auth.uid == restaurantId &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'restaurant'
        )
      );
    }

    function isCustomer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'customer';
    }
        function isRider() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'rider';
    }

    function hasValidTimestamps(data) {
      return data.createdAt is string &&
             data.lastUpdated is string;
    }

    function isValidReview() {
      return request.resource.data.keys().hasAll(['rating', 'comment']) &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5 &&
        request.resource.data.comment is string;
    }

    function isValidRestaurantData() {
      return request.resource.data.keys().hasAll(['restaurantName', 'email', 'phone']) &&
        request.resource.data.restaurantName is string &&
        request.resource.data.email is string &&
        request.resource.data.phone is string;
    }

    // Add new helper function for payment info validation
    function isValidPaymentInfo() {
      return request.resource.data.paymentInfo.keys().hasAll(['bankName', 'accountNumber', 'accountName']) &&
        request.resource.data.paymentInfo.bankName is string &&
        request.resource.data.paymentInfo.accountNumber is string &&
        request.resource.data.paymentInfo.accountName is string;
    }

    // Add S3 upload path validation
    function isValidS3Path(path) {
      return path is string && 
        (path.matches('^restaurants/[^/]+/verification/.*') ||
         path.matches('^restaurants/[^/]+/(logo|banner)/.*') ||
         path.matches('^riders/[^/]+/verification/.*'));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin() ||
        isSuperAdmin()
      );
      
      allow create: if 
        isSuperAdmin() ||  // Allow superadmin to create users
        (request.auth != null && request.auth.uid == userId);  // Allow self-registration
      
      allow update: if 
        isSuperAdmin() || 
        (isAuthenticated() && request.auth.uid == userId && (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['emailVerified', 'lastUpdated']) ||
          request.auth.uid == userId
        ));
        
      allow delete: if isSuperAdmin();
    }

    // Restaurants collection
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow create: if isRestaurantOwner(restaurantId) && isValidRestaurantData();
      allow update: if isAuthenticated() && (
        isRestaurantOwner(restaurantId) ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();

      // Menu subcollection
      match /menu/{itemId} {
        allow read: if true;
        allow write: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
      }

      // Categories subcollection
      match /categories/{categoryId} {
        allow read: if true;
        allow write: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
      }

      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isCustomer() && 
          exists(/databases/$(database)/documents/orders/{orderId}) &&
          get(/databases/$(database)/documents/orders/{orderId}).data.customerId == request.auth.uid &&
          get(/databases/$(database)/documents/orders/{orderId}).data.restaurantId == restaurantId &&
          isValidReview();
        allow update, delete: if isAdmin();
      }
      
      // Verification subcollection
      match /verification/{verificationDoc} {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow create: if isRestaurantOwner(restaurantId);
        allow update: if isAdmin() || (
          isRestaurantOwner(restaurantId) && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'lastUpdated'])
        );
        allow delete: if isAdmin();

        // Allow status document operations
        match /status {
          allow read: if isAuthenticated() && (
            isRestaurantOwner(restaurantId) ||
            isAdmin()
          );
          allow write: if isAdmin();
        }
      }

      // Update restaurant rules to handle payment info
      match /private/paymentInfo {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow create, update: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) &&
          isValidPaymentInfo()
        );
        allow delete: if false; // Prevent deletion of payment info
      }
      
      // Add rules for payment transactions
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow create: if false; // Only created by server
        allow update: if false; // Only updated by server
        allow delete: if false; // Prevent deletion of transaction records
      }
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.riderId ||
        isRestaurantOwner(resource.data.restaurantId) ||
        request.auth.token.admin == true ||
        // Allow updates for rider assignment
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['riderId', 'status', 'assignedAt', 'updatedAt']) &&
          (
            request.resource.data.status == 'assigned' ||
            request.resource.data.status == 'picked_up' ||
            request.resource.data.status == 'delivered'
          )
        )
      );
    }

    // System collections (admin only)
    match /{path=**}/system_errors/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /{path=**}/audit_logs/{docId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Root-level verification documents
    match /verification/{docId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow create: if isRestaurantOwner(request.resource.data.restaurantId);
      allow update: if isAdmin() || (
        isRestaurantOwner(resource.data.restaurantId) && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'lastUpdated'])
      );
      allow delete: if isAdmin();
    }

    // Customer favorites subcollection
    match /customers/{customerId}/favorites/{restaurantId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == customerId ||
        isAdmin()
      );
      allow write: if isAuthenticated() && request.auth.uid == customerId;
    }

    // Admin Settings Collection
    match /admin/settings {
      allow read: if true;  // Allow public read access
      allow write: if isAdmin() || isSuperAdmin();
      
      match /{document=**} {
        allow read: if isAdmin();
        allow write: if isSuperAdmin();
      }
    }

    // Admin Analytics Collection
    match /admin/analytics {
      allow read: if isSuperAdmin();
      allow write: if false;  // Analytics should only be written by system
      
      match /metrics/{metricId} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
      
      match /daily/{date} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
      
      match /restaurants/{restaurantId} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
    }

    // Restaurant verification subcollection
    match /restaurants/{restaurantId}/verification/{verificationDoc} {
      allow read: if isAuthenticated() && (
        isRestaurantOwner(restaurantId) ||
        isAdmin()
      );
      allow create: if isRestaurantOwner(restaurantId) && 
        isValidS3Path(request.resource.data.s3Path) &&
        request.resource.data.status == 'pending';
      allow update, write: if isAdmin() || isRestaurantOwner(restaurantId);
      allow delete: if isAdmin();

      // Allow status document operations
      match /status {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow write, update: if isAdmin() || isRestaurantOwner(restaurantId);
      }
    }

    // Add FCM token rules
    match /restaurants/{restaurantId}/fcmTokens/{tokenId} {
      allow read, write: if isAuthenticated() && (
        request.auth.uid == restaurantId ||
        isAdmin()
      );
      allow create: if isAuthenticated();
    }

    // Add missing rules for transfers collection
    match /transfers/{transferId} {
      allow read: if isAuthenticated() && (
        isRestaurantOwner(resource.data.restaurantId) ||
        isAdmin()
      );
      allow create, update: if false; // Only handled by server
    }

    // Add missing rules for private subcollection
    match /restaurants/{restaurantId}/private/{document=**} {
      allow read: if isAuthenticated() && (
        isRestaurantOwner(restaurantId) ||
        isAdmin()
      );
      allow write: if false; // Only handled by server
    }

    match /customers/{customerId} {
      allow read, write: if request.auth != null && request.auth.uid == customerId;
      
      // Allow reading and writing savedAddresses subcollection
      match /savedAddresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == customerId;
      }
    }

    // Add webhook handling rules
    match /webhooks/paystack/{webhookId} {
      allow read: if false;
      allow write: if false; // Only handled by server
    }

    // Admin settings document rules
    match /admin/{document=**} {
  allow read, write: if isAdmin() || isSuperAdmin();
    }

    // Allow restaurants to update their own stats
    match /restaurants/{restaurantId} {
      allow update: if request.auth != null && (
        // Allow updates to totalOrders and updatedAt fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['totalOrders', 'updatedAt'])
      );
    }

    // Add Restaurant notifications rules
    match /restaurants/{restaurantId}/notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == restaurantId ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == restaurantId ||
        isAdmin()
      );
    }

    match /riders/{riderId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == riderId;
      allow update: if isAuthenticated() && (
        request.auth.uid == riderId ||
        isAdmin()
      );
      
      match /verification/{verificationDoc} {
        allow read: if isAuthenticated() && (
          request.auth.uid == riderId ||
          isAdmin()
        );
        allow create: if request.auth.uid == riderId;
        allow update, write: if isAdmin();
      }

      // Allow write for rider assignment from orders
      allow write: if isAuthenticated() && 
        (request.auth.uid == riderId || 
         request.auth.token.admin == true ||
         (
           // Allow updates for order assignments
           request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['assignedOrders', 'lastActivity'])
         ));
    }

    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    match /walletTransactions/{transactionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    match /riders/{riderId}/verification/{verificationDoc} {
      allow read: if request.auth != null && 
        (request.auth.uid == riderId || isAdmin());
      allow write: if isAdmin();
      allow create: if request.auth.uid == riderId && 
        isValidS3Path(request.resource.data.s3Path) &&
        request.resource.data.status == 'pending';
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin()
      );
      allow update: if isAdmin() || request.auth.uid == userId;
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.riderId ||
        isRestaurantOwner(resource.data.restaurantId) ||
        request.auth.token.admin == true ||
        // Allow updates for rider assignment
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['riderId', 'status', 'assignedAt', 'updatedAt']) &&
          (
            request.resource.data.status == 'assigned' ||
            request.resource.data.status == 'picked_up' ||
            request.resource.data.status == 'delivered'
          )
        )
      );
    }

    match /riders/{riderId} {
      match /private/paymentInfo {
        allow read: if request.auth != null && request.auth.uid == riderId;
        allow create, update: if request.auth != null && request.auth.uid == riderId;
        allow delete: if false; // Prevent deletion of payment info
      }
    }

    // Add specific rules for customers collection
    match /customers/{customerId} {
      allow create: if request.auth != null && 
        request.auth.uid == customerId;
      allow read: if request.auth != null && 
        (request.auth.uid == customerId || isAdmin());
      allow update: if request.auth != null && request.auth.uid == customerId;
    }

    // Update riders collection rules
    match /riders/{riderId} {
      allow create: if request.auth != null && 
        request.auth.uid == riderId && 
        request.resource.data.keys().hasAll([
          'email', 'name', 'phone', 'vehicleType', 
          'vehiclePlate', 'status', 'isVerified'
        ]);
    }
  }
}
